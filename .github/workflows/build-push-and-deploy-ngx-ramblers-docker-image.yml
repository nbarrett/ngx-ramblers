name: Deploy and Build Docker Image and Deploy to Fly.io

on:
  push:
    branches: [ "main", "pre-main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency: deploy-group
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build the Docker image
        run: docker build . --build-arg CHROME_VERSION=${{ secrets.CHROME_VERSION }} --file Dockerfile --tag ngx-ramblers:${{ github.run_number }}

      - name: Tag the Docker image (latest)
        run: docker tag ngx-ramblers:${{ github.run_number }} ${{ secrets.DOCKER_USERNAME }}/ngx-ramblers:latest

      - name: Push the Docker image to Docker Hub (latest)
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ngx-ramblers:latest

      - name: Tag the Docker image (github run number ${{ github.run_number }})
        run: docker tag ngx-ramblers:${{ github.run_number }} ${{ secrets.DOCKER_USERNAME }}/ngx-ramblers:${{ github.run_number }}

      - name: Push the Docker image to Docker Hub (github run number ${{ github.run_number }})
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ngx-ramblers:${{ github.run_number }}

      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create Fly.io volume (serenity_data)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Check if the volume already exists
          if flyctl volumes list --app ${{ secrets.APP_NAME }} | grep -q serenity_data; then
            echo "Volume serenity_data already exists"
          else
            echo "Creating volume serenity_datas in region ${{ secrets.FLY_REGION }}"
            flyctl volumes create serenity_data --app ${{ secrets.APP_NAME }} --region ${{ secrets.FLY_REGION }} --size 1 --yes
          fi

      - name: Verify fly.toml existence
        run: |
          ls -la
          if [ -f "fly.toml" ]; then echo "fly.toml found"; else echo "fly.toml not found" && exit 1; fi

      - name: Sync fly.toml to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl config validate --config fly.toml --app ${{ secrets.APP_NAME }}
          flyctl deploy --app ${{ secrets.APP_NAME }} --config fly.toml --image ${{ secrets.DOCKER_USERNAME }}/ngx-ramblers:latest --detach

      - name: Scale App to 1
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl scale count 1 --app ${{ secrets.APP_NAME }}
